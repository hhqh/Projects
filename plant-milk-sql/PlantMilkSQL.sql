/*
	Personal Database Project
    Helen Huang
*/

-- Use my database
USE milkdb;

/*
	Drop Tables Stored Procedure
*/

DELIMITER $$
	DROP PROCEDURE IF EXISTS SP_DROP_TABLES$$
	CREATE PROCEDURE SP_DROP_TABLES ()
	BEGIN
		/*
			DROP TABLES  ABD OLD TABLES
		*/

		-- Drop rating table
		DROP TABLE IF EXISTS RATING;

		-- Drop line table
		DROP TABLE IF EXISTS LINE;

		-- Drop receipt table
		DROP TABLE IF EXISTS RECEIPT;

		-- Drop client table
		DROP TABLE IF EXISTS CLIENT; 

		-- Drop store location table
		DROP TABLE IF EXISTS STORELOCATION;

		-- Drop milk table
		DROP TABLE IF EXISTS MILK;

		-- Drop nutrition table
		DROP TABLE IF EXISTS NUTRITION;

		-- Drop milk brand table
		DROP TABLE IF EXISTS MILKBRAND;

		-- Drop milk type table
		DROP TABLE IF EXISTS MILKTYPE;
END$$
DELIMITER ;

/*
	Create Tables Stored Procedure
*/
	DELIMITER $$
	DROP PROCEDURE IF EXISTS SP_CREATE_TABLES$$
	CREATE PROCEDURE SP_CREATE_TABLES ()
	BEGIN
		/*
			CREATE TABLES
		*/
		-- Create MilkType Table
		CREATE TABLE IF NOT EXISTS MILKTYPE(
		MILKTYPE_ID INT AUTO_INCREMENT PRIMARY KEY,
		MILKTYPE_NAME VARCHAR(50) NOT NULL UNIQUE
		);

		-- Create MilkBrand Table
		CREATE TABLE IF NOT EXISTS MILKBRAND(
		MILKBRAND_ID INT AUTO_INCREMENT PRIMARY KEY,
		MILKBRAND_NAME VARCHAR(50) NOT NULL UNIQUE
		);

		-- Create nutrition table
		CREATE TABLE IF NOT EXISTS NUTRITION(
		NUTRITION_ID INT AUTO_INCREMENT PRIMARY KEY,
		NUTRITION_CALORIES VARCHAR(50) NOT NULL,
		NUTRITION_CARBS VARCHAR(50) NOT NULL,
		NUTRITION_PROTEIN VARCHAR(50) NOT NULL,
		NUTRITION_FATS VARCHAR(50) NOT NULL
		);

		-- Create  Milk Table
		CREATE TABLE IF NOT EXISTS MILK(
		MILK_ID INT AUTO_INCREMENT PRIMARY KEY,
		MILKTYPE_ID INT,
		MILKBRAND_ID INT,
		NUTRITION_ID INT,
		MILK_NAME VARCHAR(50) NOT NULL,
		MILK_SWEET VARCHAR(50) NOT NULL,
		FOREIGN KEY (MILKTYPE_ID) REFERENCES MILKTYPE(MILKTYPE_ID),
		FOREIGN KEY (MILKBRAND_ID) REFERENCES MILKBRAND(MILKBRAND_ID),
		FOREIGN KEY (NUTRITION_ID) REFERENCES NUTRITION(NUTRITION_ID)
		);

		-- Create Store Location table
		CREATE TABLE IF NOT EXISTS STORELOCATION(
		STORELOCATION_ID INT AUTO_INCREMENT PRIMARY KEY,
		STORELOCATION_NAME VARCHAR(50) NOT NULL
		);

		-- Create client table
		CREATE TABLE IF NOT EXISTS CLIENT(
		CLIENT_ID INT AUTO_INCREMENT PRIMARY KEY,
		CLIENT_FIRST_NAME VARCHAR(50) NOT NULL,
		CLIENT_LAST_NAME VARCHAR(50) NOT NULL
		);

		-- Create Receipt Table
		CREATE TABLE IF NOT EXISTS RECEIPT(
		RECEIPT_ID INT AUTO_INCREMENT,
		STORELOCATION_ID INT,
		CLIENT_ID INT,
		RECEIPT_DATE DATE NOT NULL,
		FOREIGN KEY (STORELOCATION_ID) REFERENCES STORELOCATION(STORELOCATION_ID),
		FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID),
		PRIMARY KEY(RECEIPT_ID,STORELOCATION_ID, CLIENT_ID)
		);

		-- Create line table
		CREATE TABLE IF NOT EXISTS LINE(
		LINE_ID INT AUTO_INCREMENT,
		MILK_ID INT,
		RECEIPT_ID INT,
		LINE_PRICE FLOAT NOT NULL,
		FOREIGN KEY (MILK_ID) REFERENCES MILK(MILK_ID),
		FOREIGN KEY (RECEIPT_ID) REFERENCES RECEIPT(RECEIPT_ID),
		PRIMARY KEY (LINE_ID,MILK_ID, RECEIPT_ID)
		);

		-- Create Rating table
		CREATE TABLE IF NOT EXISTS RATING(
		MILK_ID INT,
		CLIENT_ID INT,
		RATING_NUM FLOAT NOT NULL
			CONSTRAINT Rating CHECK (RATING_NUM BETWEEN 0 AND 5),
		FOREIGN KEY (MILK_ID) REFERENCES MILK(MILK_ID),
		FOREIGN KEY(CLIENT_ID) REFERENCES CLIENT(CLIENT_ID),
		PRIMARY KEY(MILK_ID, CLIENT_ID)
		);
END$$
DELIMITER ;


/*
	Create Views Stored Procedure
*/
	DELIMITER $$
	DROP PROCEDURE IF EXISTS SP_CREATE_VIEWS$$
	CREATE PROCEDURE SP_CREATE_VIEWS()
	BEGIN
		/*
			CREATE VIEWS
		*/

		-- Returns all the clients' info on their purchased milk products 
		CREATE OR REPLACE VIEW VIEW_CLIENTS_ALL AS
			SELECT 
				CONCAT(CLIENT_FIRST_NAME, ' ', CLIENT_LAST_NAME) AS FULLNAME, 
				MILK.MILK_NAME,
				LINE.LINE_PRICE,	
				RECEIPT.RECEIPT_DATE,
				STORELOCATION.STORELOCATION_NAME
			FROM MILK
				INNER JOIN LINE ON MILK.MILK_ID = LINE.MILK_ID
				INNER JOIN RECEIPT ON RECEIPT.RECEIPT_ID = LINE.RECEIPT_ID 
				INNER JOIN STORELOCATION ON STORELOCATION.STORELOCATION_ID = RECEIPT.STORELOCATION_ID
				INNER JOIN CLIENT ON CLIENT.CLIENT_ID = RECEIPT.CLIENT_ID;
	    
        -- Returns the milk name, milk type, milk brand, price and the nutrition facts of all milk products
		CREATE OR REPLACE VIEW VIEW_MILK_ALL AS
			SELECT 	
				MILK.MILK_NAME,
				MILKBRAND.MILKBRAND_NAME,
				MILKTYPE.MILKTYPE_NAME,
				LINE.LINE_PRICE,
				NUTRITION.NUTRITION_CALORIES,
				NUTRITION.NUTRITION_CARBS,
				NUTRITION.NUTRITION_PROTEIN,
				NUTRITION.NUTRITION_FATS
			FROM
				MILK
				INNER JOIN NUTRITION ON NUTRITION.NUTRITION_ID = MILK.NUTRITION_ID
				INNER JOIN MILKTYPE ON MILK.MILKTYPE_ID = MILKTYPE.MILKTYPE_ID
				INNER JOIN MILKBRAND ON MILK.MILKBRAND_ID = MILKBRAND.MILKBRAND_ID
				INNER JOIN LINE ON MILK.MILK_ID = LINE.MILK_ID;

		/*
			Interesting queries: queries from table
            
		*/

		-- Returns milk products that are almond and oat 
		CREATE OR REPLACE VIEW VIEW_MILK_ALMOND_OAT_ALL AS
			SELECT 
				MILK_NAME, MILKBRAND_NAME, MILKTYPE_NAME, LINE_PRICE, NUTRITION_CALORIES,NUTRITION_CARBS, NUTRITION_PROTEIN, NUTRITION_FATS
			FROM 
				VIEW_MILK_ALL
			WHERE 
				MILKTYPE_NAME = 'Almond' OR MILKTYPE_NAME = 'Oat';
				
		-- Returns milk products that have price of $3 and up 
		CREATE OR REPLACE VIEW VIEW_MILK_PRICE_3_UP AS
			SELECT 
				MILK_NAME, MILKBRAND_NAME, MILKTYPE_NAME, LINE_PRICE, NUTRITION_CALORIES,NUTRITION_CARBS, NUTRITION_PROTEIN, NUTRITION_FATS
			FROM 
				VIEW_MILK_ALL
			WHERE 
				LINE_PRICE >= 3; 

		-- Who has not brought milk from QFC Broadway? (IN DESC ORDER BY LAST NAME)
        CREATE OR REPLACE VIEW VIEW_CLIENT_NOT_BROUGHT_QFC AS
			SELECT CONCAT(CLIENT_FIRST_NAME, ' ', CLIENT_LAST_NAME) AS FULLNAME
			FROM CLIENT 
			WHERE CLIENT_ID NOT IN (SELECT CLIENT_ID FROM RECEIPT, STORELOCATION 
				WHERE STORELOCATION.STORELOCATION_ID = RECEIPT.STORELOCATION_ID 
				AND STORELOCATION_NAME = 'QFC Broadway')
			ORDER BY CLIENT_LAST_NAME DESC;
		
		/*
			Interesting queries: queries with inner join across at least 2 tables
            
		*/
        
		-- What is the num of purchase, total purchase, average purchase for each client?
        CREATE OR REPLACE VIEW VIEW_CLIENT_SUMMARY AS
			SELECT CONCAT(CLIENT.CLIENT_FIRST_NAME,' ',CLIENT.CLIENT_LAST_NAME) AS FULLNAME, COUNT(*) AS NUM_PURCHASE,
					ROUND(SUM(LINE.LINE_PRICE),2) AS SUM_PURCHASE, ROUND(AVG(LINE.LINE_PRICE),2) AS AVG_PURCHASE
			FROM CLIENT
				INNER JOIN RECEIPT ON RECEIPT.CLIENT_ID = CLIENT.CLIENT_ID
				INNER JOIN LINE ON LINE.RECEIPT_ID = RECEIPT.RECEIPT_ID
			GROUP BY FULLNAME;
				
		-- How many milk products for each milk type? 
        CREATE OR REPLACE VIEW VIEW_PRODUCT_EACH_TYPE AS
			SELECT MILKTYPE_NAME, COUNT(MILKTYPE.MILKTYPE_ID) AS TOTAL
			FROM MILKTYPE
				INNER JOIN MILK ON MILK.MILKTYPE_ID = MILKTYPE.MILKTYPE_ID
			GROUP BY MILKTYPE_NAME;

		-- What are the milk products that have calories 70 and above?
        CREATE OR REPLACE VIEW VIEW_MILK_CAL_70_UP AS
			SELECT MILK.MILK_NAME, MILK.MILK_SWEET, NUTRITION.NUTRITION_CALORIES
			FROM NUTRITION
				INNER JOIN MILK ON MILK.NUTRITION_ID = NUTRITION.NUTRITION_ID
			WHERE NUTRITION_CALORIES >= 70;

		-- What are the milk brands that have ratings 4.5 and higher?
        CREATE OR REPLACE VIEW VIEW_BRAND_RATING_4H_UP AS
			SELECT MILKBRAND_NAME, RATING.RATING_NUM
			FROM MILKBRAND
			INNER JOIN MILK ON MILKBRAND.MILKBRAND_ID = MILK.MILKBRAND_ID
			INNER JOIN RATING ON MILK.MILK_ID = RATING.MILK_ID
			WHERE RATING_NUM >= 4.5;

		-- How much money does the users spend for from 02-03-2020 to 02-09-2020?
        CREATE OR REPLACE VIEW VIEW_CLIENT_SUM_0203_0209 AS
			SELECT CONCAT(CLIENT_FIRST_NAME, ' ', CLIENT_LAST_NAME) AS FULLNAME, RECEIPT_DATE, ROUND(SUM(LINE.LINE_PRICE),2)
			FROM CLIENT
			INNER JOIN RECEIPT ON RECEIPT.CLIENT_ID = CLIENT.CLIENT_ID
			INNER JOIN LINE ON LINE.RECEIPT_ID = RECEIPT.RECEIPT_ID
			WHERE RECEIPT_DATE <= '2020-02-09' AND RECEIPT_DATE >= '2020-02-03'
			GROUP BY FULLNAME, RECEIPT_DATE;

		-- What store locations have been visited by each client and when?
        CREATE OR REPLACE VIEW VIEW_CLIENT_VISITED AS
			SELECT CONCAT(CLIENT_FIRST_NAME, ' ', CLIENT_LAST_NAME) AS FULLNAME, STORELOCATION.STORELOCATION_NAME, RECEIPT.RECEIPT_DATE
			FROM CLIENT 
			INNER JOIN RECEIPT ON RECEIPT.CLIENT_ID = CLIENT.CLIENT_ID
			INNER JOIN STORELOCATION ON STORELOCATION.STORELOCATION_ID = RECEIPT.STORELOCATION_ID;
		
        /*
			Interesting queries: query with left join across at least 2 tables
            
		*/
        -- Returns the table of milk with all the rating numbers for each, even if there is no rating num
        CREATE OR REPLACE VIEW VIEW_MILK_RATING AS
			SELECT MILK_NAME, MILK_SWEET, RATING_NUM
			FROM MILK
			LEFT JOIN RATING ON RATING.MILK_ID = MILK.MILK_ID;
         
         
		/*
			Interesting queries: query with left join finding missing data
            
		*/
        
        -- Who did not write a rating?
        CREATE OR REPLACE VIEW VIEW_CLIENT_NO_RATING AS
			SELECT CONCAT(CLIENT_FIRST_NAME, ' ', CLIENT_LAST_NAME) AS FULLNAME
			FROM CLIENT 
			LEFT OUTER JOIN RATING ON RATING.CLIENT_ID = CLIENT.CLIENT_ID
			WHERE RATING.CLIENT_ID IS NULL;

END$$
DELIMITER;

/*
	Create procedures
*/

DELIMITER $$

-- Create/Replace a Procedure called CLIENT_ADD that adds a MILK TYPE if it does not exist
DROP PROCEDURE IF EXISTS SP_CLIENT_ADD$$
CREATE PROCEDURE SP_CLIENT_ADD (IN C_FIRST_NAME VARCHAR(50), IN C_LAST_NAME CHAR(50)) 
BEGIN
	INSERT INTO CLIENT(CLIENT_FIRST_NAME, CLIENT_LAST_NAME)
	SELECT C_FIRST_NAME, C_LAST_NAME
	WHERE 
		NOT EXISTS (SELECT CLIENT_ID FROM CLIENT WHERE CLIENT_FIRST_NAME = C_FIRST_NAME AND CLIENT_LAST_NAME = C_LAST_NAME);
END$$

-- Create/Replace a Procedure called STORELOCATION_ADD that adds a STORE LOCATION if it does not exist
DROP PROCEDURE IF EXISTS SP_STORELOCATION_ADD$$
CREATE PROCEDURE SP_STORELOCATION_ADD (IN SL_NAME VARCHAR(50)) 
BEGIN
	INSERT INTO STORELOCATION(STORELOCATION_NAME)
	SELECT SL_NAME
	WHERE 
		NOT EXISTS (SELECT STORELOCATION_ID FROM STORELOCATION WHERE STORELOCATION_NAME = SL_NAME);
END$$

-- Create/Replace a Procedure called NUTRTION_ADD that adds a NUTRTION if it does not exist
DROP PROCEDURE IF EXISTS SP_NUTRITION_ADD$$
CREATE PROCEDURE SP_NUTRITION_ADD (IN N_CAL VARCHAR(50), IN N_CAR VARCHAR(50), IN N_PRO VARCHAR(50), IN N_FAT VARCHAR(50)) 
BEGIN
	INSERT INTO NUTRITION(NUTRITION_CALORIES, NUTRITION_CARBS, NUTRITION_PROTEIN, NUTRITION_FATS)
	SELECT N_CAL, N_CAR, N_PRO, N_FAT
	WHERE 
		NOT EXISTS (SELECT NUTRITION_ID FROM NUTRITION 
					WHERE NUTRITION_CALORIES = N_CAL AND NUTRITION_CARBS = N_CAR AND NUTRITION_PROTEIN = N_PRO AND NUTRITION_FATS = N_FAT);
END$$

-- Create/Replace a Procedure called MILKTYPE_ADD that adds a MILK TYPE if it does not exist
DROP PROCEDURE IF EXISTS SP_MILKTYPE_ADD$$
CREATE PROCEDURE SP_MILKTYPE_ADD (IN MT_NAME VARCHAR(50)) 
BEGIN
	INSERT INTO MILKTYPE(MILKTYPE_NAME)
	SELECT MT_NAME
	WHERE 
		NOT EXISTS (SELECT MILKTYPE_ID FROM MILKTYPE WHERE MILKTYPE_NAME = MT_NAME);
END$$

-- Create/Replace a Procedure called MILKBRAND_ADD that adds a MILK BRAND if it does not exist
DROP PROCEDURE IF EXISTS SP_MILKBRAND_ADD$$
CREATE PROCEDURE SP_MILKBRAND_ADD (IN MB_NAME VARCHAR(50)) 
BEGIN
	INSERT INTO MILKBRAND(MILKBRAND_NAME)
	SELECT MB_NAME
	WHERE 
		NOT EXISTS (SELECT MILKBRAND_ID FROM MILKBRAND WHERE MILKBRAND_NAME = MB_NAME);
END$$

-- Create/Replace a Procedure called SP_MILK_ADD and add milk product if not exist
DROP PROCEDURE IF EXISTS SP_MILK_ADD$$
CREATE PROCEDURE SP_MILK_ADD (IN MT_NAME VARCHAR(50), IN MB_NAME VARCHAR(50), IN N_CAL VARCHAR(50), IN M_NAME VARCHAR(50), IN M_SWEET VARCHAR(50))
BEGIN
IF NOT EXISTS (
		SELECT MILK_NAME
		FROM MILK
		WHERE 
			MILK_NAME = M_NAME

)THEN
	INSERT INTO MILK(MILKTYPE_ID, MILKBRAND_ID,NUTRITION_ID, MILK_NAME, MILK_SWEET)
	SELECT 
		MILKTYPE.MILKTYPE_ID,
		MILKBRAND.MILKBRAND_ID,
        NUTRITION.NUTRITION_ID,
        M_NAME,
        M_SWEET
	FROM MILKBRAND
		INNER JOIN MILKTYPE ON MILKTYPE.MILKTYPE_ID = (SELECT MILKTYPE_ID FROM MILKTYPE WHERE MILKTYPE_NAME = MT_NAME)     
        INNER JOIN NUTRITION ON NUTRITION.NUTRITION_ID = (SELECT NUTRITION_ID FROM NUTRITION WHERE NUTRITION_CALORIES = N_CAL)
        LEFT OUTER JOIN MILK ON MILK.MILKBRAND_ID = MILKBRAND.MILKBRAND_ID
	WHERE 
		NOT EXISTS (SELECT MILK_ID FROM MILK WHERE MILK_NAME = M_NAME AND MILK_SWEET = M_SWEET) AND
		MILKBRAND.MILKBRAND_NAME = MB_NAME;
	END IF;
END$$

-- Create/Replace a Procedure called SP_RECEIPT_ADD and add RECEIPT if not exist
DROP PROCEDURE IF EXISTS SP_RECEIPT_ADD$$
CREATE PROCEDURE SP_RECEIPT_ADD (IN SL_NAME VARCHAR(50), IN R_DATE DATE, IN C_FIRST_NAME VARCHAR(50), IN C_LAST_NAME VARCHAR(50))
BEGIN
IF NOT EXISTS (
		SELECT RECEIPT_DATE
		FROM RECEIPT
		WHERE 
			RECEIPT_DATE = R_DATE

)THEN
	INSERT INTO RECEIPT(CLIENT_ID, STORELOCATION_ID, RECEIPT_DATE)
	SELECT 
		CLIENT.CLIENT_ID,
		STORELOCATION.STORELOCATION_ID,
        R_DATE
	FROM STORELOCATION
		INNER JOIN CLIENT ON CLIENT.CLIENT_ID = (SELECT CLIENT_ID FROM CLIENT WHERE CLIENT_FIRST_NAME = C_FIRST_NAME AND CLIENT_LAST_NAME = C_LAST_NAME)     
	WHERE 
		STORELOCATION.STORELOCATION_NAME = SL_NAME;
	END IF;
END$$

-- Create/Replace a Procedure called SP_RATING_ADD and add RATING if not exist
DROP PROCEDURE IF EXISTS SP_RATING_ADD$$
CREATE PROCEDURE SP_RATING_ADD (IN C_FIRST_NAME VARCHAR(50), IN C_LAST_NAME VARCHAR(50), IN M_NAME VARCHAR(50),IN M_SWEET VARCHAR(50),IN R_NUM FLOAT)
BEGIN
	INSERT INTO RATING(CLIENT_ID, MILK_ID, RATING_NUM)
	SELECT 
		CLIENT.CLIENT_ID,
		MILK.MILK_ID,
        R_NUM
	FROM MILK
		INNER JOIN CLIENT ON CLIENT.CLIENT_ID = (SELECT CLIENT_ID FROM CLIENT WHERE CLIENT_FIRST_NAME = C_FIRST_NAME AND CLIENT_LAST_NAME = C_LAST_NAME)     
        LEFT OUTER JOIN RATING ON RATING.MILK_ID = MILK.MILK_ID
	WHERE 
		MILK.MILK_NAME = M_NAME AND
        MILK.MILK_SWEET = M_SWEET;
END$$

-- Create/Replace a Procedure called SP_LINE_ADD and add LINE PRICE to corresponding milk product and receipt
DROP PROCEDURE IF EXISTS SP_LINE_ADD$$
CREATE PROCEDURE SP_LINE_ADD (IN R_DATE DATE, IN M_NAME VARCHAR(50), IN M_SWEET VARCHAR(50), IN L_PRICE FLOAT)
BEGIN
IF NOT EXISTS (
		SELECT LINE_PRICE
		FROM LINE
		WHERE 
			LINE_PRICE = L_PRICE

)THEN
	INSERT INTO LINE(RECEIPT_ID,MILK_ID,LINE_PRICE)
	SELECT 
		RECEIPT.RECEIPT_ID,
		MILK.MILK_ID,
        L_PRICE
	FROM MILK
		INNER JOIN RECEIPT ON RECEIPT.RECEIPT_ID = (SELECT RECEIPT_ID FROM RECEIPT WHERE RECEIPT_DATE = R_DATE)     
        LEFT OUTER JOIN LINE ON LINE.MILK_ID = MILK.MILK_ID
	WHERE 
		MILK.MILK_NAME = M_NAME AND
        MILK.MILK_SWEET = M_SWEET; 
END IF;
END$$ 
DELIMITER ;

/*
	Insert Data Stored Procedure
*/
	DELIMITER $$
	DROP PROCEDURE IF EXISTS SP_INSERT_DATA$$
	CREATE PROCEDURE SP_INSERT_DATA ()
	BEGIN

		/*
			Inserting data into tables
		*/

		-- Inserting store locations into table
		CALL SP_STORELOCATION_ADD('Central Co-op');
		CALL SP_STORELOCATION_ADD('QFC Broadway');
		CALL SP_STORELOCATION_ADD('Whole Foods Market');

		-- Inserting client info into table
		CALL SP_CLIENT_ADD('Ai','Akimaru'); 
		CALL SP_CLIENT_ADD('Annette', 'Moon');
		CALL SP_CLIENT_ADD('Quincey','Mendes');
		CALL SP_CLIENT_ADD('Ming', 'Chai');
		CALL SP_CLIENT_ADD('Olve', 'Niemi');
		CALL SP_CLIENT_ADD('Vivien', 'Marchesi');

		-- Inserting nutrition info into table
		CALL SP_NUTRITION_ADD('69','5g','2g','1g');
		CALL SP_NUTRITION_ADD('50','2g','0g','4g');
		CALL SP_NUTRITION_ADD('60','7g','1g','4.5g');
		CALL SP_NUTRITION_ADD('100','8g','7g','4g');
		CALL SP_NUTRITION_ADD('40','2g','1g','3g');
		CALL SP_NUTRITION_ADD('30','1g','1g','2.5g');
		CALL SP_NUTRITION_ADD('120','16g','3g','5g');
		CALL SP_NUTRITION_ADD('130','25g','4g','2g');

		-- Inserting milk types into table
		CALL SP_MILKTYPE_ADD('Soy');
		CALL SP_MILKTYPE_ADD('Coconut');
		CALL SP_MILKTYPE_ADD('Hemp');
		CALL SP_MILKTYPE_ADD('Macadamia');
		CALL SP_MILKTYPE_ADD('Almond');
		CALL SP_MILKTYPE_ADD('Oat');

		-- Inserting milk brands into table
		CALL SP_MILKBRAND_ADD('Tempt');
		CALL SP_MILKBRAND_ADD('Milkadamia');
		CALL SP_MILKBRAND_ADD('365 Whole Foods Market');
		CALL SP_MILKBRAND_ADD('Blue Diamond');
		CALL SP_MILKBRAND_ADD('Pacific Foods');

		-- Inserting milk products into table
		CALL SP_MILK_ADD('Hemp','Tempt','69', 'Organic Hemp Milk', 'Unsweetened');
		CALL SP_MILK_ADD('Coconut','Pacific Foods','50', 'Organic Vanilla Coconut Beverage', 'Unsweetened');
		CALL SP_MILK_ADD('Macadamia','Milkadamia','60', 'Original Macadamia Nut Milk', 'Sweetened');
		CALL SP_MILK_ADD('Soy','365 Whole Foods Market','100', 'Organic Original Soymilk', 'Sweetened');
		CALL SP_MILK_ADD('Almond','365 Whole Foods Market','40', 'Organic Vanilla Almond Milk', 'Unsweetened');
		CALL SP_MILK_ADD('Almond','Blue Diamond','30', 'Vanilla AlmondBreeze Almond Milk', 'Unsweetened');
		CALL SP_MILK_ADD('Oat','Pacific Foods','130', 'Organic Vanilla Oat Beverage', 'Sweetened');

		-- Inserting purchase date to corresponding milk products brought
		CALL SP_RECEIPT_ADD('Central Co-op','2020-03-06','Ai','Akimaru');  
		CALL SP_RECEIPT_ADD('QFC Broadway','2020-03-02','Vivien','Marchesi');
		CALL SP_RECEIPT_ADD('QFC Broadway','2020-10-03','Ming','Chai');  
		CALL SP_RECEIPT_ADD('Whole Foods Market','2020-06-01','Quincey','Mendes');
		CALL SP_RECEIPT_ADD('QFC Broadway','2020-12-01','Annette','Moon');
		CALL SP_RECEIPT_ADD('Whole Foods Market','2020-09-11','Olve', 'Niemi');
		CALL SP_RECEIPT_ADD('Whole Foods Market','2020-09-12','Vivien','Marchesi');
		CALL SP_RECEIPT_ADD('QFC Broadway','2020-02-08','Vivien','Marchesi');

		-- Inserting ratings to the milk products brought
		CALL SP_RATING_ADD('Ai','Akimaru', 'Organic Hemp Milk', 'Unsweetened', 4.5);
		CALL SP_RATING_ADD('Vivien','Marchesi', 'Organic Vanilla Coconut Beverage', 'Unsweetened', 4.2);
		CALL SP_RATING_ADD('Ming','Chai','Original Macadamia Nut Milk', 'Sweetened', 4.9);
		CALL SP_RATING_ADD('Annette','Moon','Organic Vanilla Almond Milk', 'Unsweetened', 4.9);
		CALL SP_RATING_ADD('Ming','Chai','Vanilla AlmondBreeze Almond Milk', 'Unsweetened', 5);
		CALL SP_RATING_ADD('Vivien','Marchesi','Organic Vanilla Oat Beverage', 'Sweetened', 3.4);
		CALL SP_RATING_ADD('Olve', 'Niemi','Organic Vanilla Almond Milk', 'Unsweetened', 3.9);

		-- Inserting milk product prices
		CALL SP_LINE_ADD('2020-03-06','Organic Hemp Milk', 'Unsweetened', 3.59);
		CALL SP_LINE_ADD('2020-03-02','Organic Vanilla Coconut Beverage', 'Unsweetened', 3.29);
		CALL SP_LINE_ADD('2020-10-03','Original Macadamia Nut Milk', 'Sweetened', 4.99);
		CALL SP_LINE_ADD('2020-06-01','Organic Original Soymilk', 'Sweetened', 3.79);
		CALL SP_LINE_ADD('2020-12-01','Organic Vanilla Almond Milk', 'Unsweetened', 4.69);
		CALL SP_LINE_ADD('2020-10-03','Vanilla AlmondBreeze Almond Milk', 'Unsweetened', 1.99);
		CALL SP_LINE_ADD('2020-09-11','Organic Vanilla Almond Milk', 'Unsweetened', 3.19);
		CALL SP_LINE_ADD('2020-02-08','Organic Vanilla Oat Beverage', 'Sweetened', 1.59);
END$$ 
DELIMITER ;

/*
	Create Datas Stored Procedure
*/
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_CREATE_DATA$$
CREATE PROCEDURE SP_CREATE_DATA()
BEGIN
	CALL SP_DROP_TABLES();
	CALL SP_CREATE_TABLES();
    CALL SP_CREATE_VIEWS();	
    CALL SP_INSERT_DATA();	
END$$
DELIMITER ;
   
/*
	Show result Stored Procedure
*/
	DELIMITER $$
	DROP PROCEDURE IF EXISTS SP_SHOW_RESULT$$
	CREATE PROCEDURE SP_SHOW_RESULT()
	BEGIN
        -- Returns all milk products
        SELECT * FROM VIEW_MILK_ALL;
        
        -- Returns all client info
        SELECT * FROM VIEW_CLIENTS_ALL;
        
	    -- Returns all milk that are almond and oat
        SELECT * FROM VIEW_MILK_ALMOND_OAT_ALL;
        
        -- Returns all milk price >= 3 dollars
        SELECT * FROM VIEW_MILK_PRICE_3_UP;
        
        -- Returns clients who has not brought things in QFC
        SELECT * FROM VIEW_CLIENT_NOT_BROUGHT_QFC;
        
        -- Returns client's spending summary
        SELECT * FROM VIEW_CLIENT_SUMMARY;
        
        -- Returns products of each milk type
        SELECT * FROM VIEW_PRODUCT_EACH_TYPE;
        
        -- Returns milk products with calories > 70
        SELECT * FROM VIEW_MILK_CAL_70_UP;
        
        -- Returns milk brand with rating >= 4.5 
        SELECT * FROM VIEW_BRAND_RATING_4H_UP;
        
        -- Returns the client spending summary from 02-03-2020 to 02-09-2020
        SELECT * FROM VIEW_CLIENT_SUM_0203_0209;
        
        -- Returns client's history to stores visited
        SELECT * FROM VIEW_CLIENT_VISITED; 
        
        -- Returns clients who have not rated
        SELECT * FROM VIEW_CLIENT_NO_RATING;
        
        -- Returns milk products with rating even if no rating
        SELECT * FROM VIEW_MILK_RATING;
	END$$
	DELIMITER ;     
    
CALL SP_CREATE_DATA();
CALL SP_SHOW_RESULT();



